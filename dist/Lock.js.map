{"version":3,"sources":["Lock.ts"],"names":[],"mappings":";;AAAA,MAAa,IAAI;IAcb,YAAY,GAAW,EAAE,YAAoB,IAAI;QAC7C,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;IAC3B,CAAC;IAEM,IAAI;QACP,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACzB,CAAC;IAEM,MAAM;QACT,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;YAC5B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;YACtB,OAAO;SACV;QACD,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,SAAS,EAAE,GAAG,EAAE,EAAE;YAC3C,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC;gBAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC;SAC5D;IACL,CAAC;IAEM,IAAI;QAEP,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAChB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;SAC5B;QAED,IAAI,IAAI,GAAQ;YACZ,EAAE,EAAG,IAAI;YACT,KAAK,EAAG,IAAI;SACf,CAAC;QAEF,IAAI,CAAC,KAAK,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YACjC,IAAI,CAAC,EAAE,GAAG,OAAO,CAAC;QACtB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEzB,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;CACJ;AAvDD,oBAuDC","file":"Lock.js","sourcesContent":["export class Lock {\n    public key: string;\n    private _: Promise<void>;\n\n    public isLocked: boolean;\n\n    public gateWidth: number;\n\n    public currentNumber: number;\n    public waitList: Array<{\n        go: any,\n        token: Promise<void>\n    }>;\n\n    constructor(key: string, gateWidth: number = null) {\n        this.key = key;\n        this.gateWidth = gateWidth;\n        this.waitList = [];\n        this.isLocked = false;\n        this.currentNumber = 0;\n    }\n\n    public lock() {\n        this.isLocked = true;\n    }\n\n    public unlock() {\n        if (this.waitList.length === 0) {\n            this.isLocked = false;\n            return;\n        }\n        for (let num = 0; num < this.gateWidth; num++) {\n            if (this.waitList.length > 0) this.waitList.shift().go();\n        }\n    }\n\n    public wait(): Promise<void> {\n\n        if (!this.isLocked) {\n            this.isLocked = true;\n            return Promise.resolve();\n        }\n\n        let wait: any = {\n            go : null,\n            token : null,\n        };\n\n        wait.token = new Promise((resolve) => {\n            wait.go = resolve;\n        });\n        this.waitList.push(wait);\n\n        return wait.token;\n    }\n}\n"]}