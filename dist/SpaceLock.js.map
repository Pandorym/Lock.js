{"version":3,"sources":["SpaceLock.ts"],"names":[],"mappings":";;AAAA,MAAa,SAAS;IA4BlB,YAAY,GAAW,EAAE,OAAa;QAElC,IAAI,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,SAAS,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;QAEpE,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC;QAEpC,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;IAC3B,CAAC;IArBD,IAAW,MAAM;QACb,OAAO,CAAC,CAAC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;IAClD,CAAC;IAED,IAAW,QAAQ;QACf,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAED,IAAW,OAAO;QACd,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;IACrC,CAAC;IAaM,MAAM;QACT,OAAO,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,aAAa,EAAE,EAAE;YACvD,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC;SAC/B;IACL,CAAC;IAEM,IAAI;QACP,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;IAEM,MAAM;QACT,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IAEM,IAAI;QACP,IAAI,IAAI,GAAQ;YACZ,EAAE,EAAG,IAAI;YACT,KAAK,EAAG,IAAI;SACf,CAAC;QAEF,IAAI,CAAC,KAAK,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YACjC,IAAI,CAAC,EAAE,GAAG,OAAO,CAAC;QACtB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE1B,IAAI,CAAC,MAAM,EAAE,CAAC;QAEd,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;;AAxDa,wBAAc,GAAG;IAC3B,SAAS,EAAG,CAAC;CAChB,CAAC;AAdN,8BAqEC","file":"SpaceLock.js","sourcesContent":["export class SpaceLock {\n    public key: string;\n    private _: Promise<void>;\n\n    public spaceSize: number;\n\n    public currentNumber: number;\n    public TaskQueue: Array<{\n        go: any,\n        token: Promise<void>\n    }>;\n\n    public static defaultOptions = {\n        spaceSize : 1,\n    };\n\n    public get isFull() {\n        return !(this.currentNumber < this.spaceSize);\n    }\n\n    public get isLocked() {\n        return this.isFull;\n    }\n\n    public get hasWait() {\n        return this.TaskQueue.length > 0;\n    }\n\n    constructor(key: string, options?: any) {\n\n        let _options = Object.assign({}, SpaceLock.defaultOptions, options);\n\n        this.spaceSize = _options.spaceSize;\n\n        this.key = key;\n        this.TaskQueue = [];\n        this.currentNumber = 0;\n    }\n\n    public update() {\n        for (; !this.isFull && this.hasWait; this.currentNumber++) {\n            this.TaskQueue.shift().go();\n        }\n    }\n\n    public lock() {\n        this.currentNumber++;\n    }\n\n    public unlock() {\n        this.currentNumber--;\n        this.update();\n    }\n\n    public wait(): Promise<void> {\n        let wait: any = {\n            go : null,\n            token : null,\n        };\n\n        wait.token = new Promise((resolve) => {\n            wait.go = resolve;\n        });\n        this.TaskQueue.push(wait);\n\n        this.update();\n\n        return wait.token;\n    }\n}\n"]}