{"version":3,"sources":["Ymir.ts"],"names":[],"mappings":";;AAAA,2CAAwC;AAExC,MAAa,IAAI;IASb,YAAY,OAAa;QARlB,WAAM,GAAqB,EAAE,CAAC;QASjC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;IACnE,CAAC;IAEM,YAAY,CAAC,GAAW,EAAE,mBAAwB,IAAI,CAAC,OAAO;QACjE,IAAI,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;QAEvD,IAAI,SAAS,KAAK,SAAS,EAAE;YACzB,SAAS,GAAG,IAAI,qBAAS,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;YACjD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SAC/B;QAED,OAAO,SAAS,CAAC;IACrB,CAAC;IAEM,OAAO,CAAC,GAAW;QACtB,IAAI,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QACvC,OAAO,SAAS,CAAC,OAAO,EAAE,CAAC;IAC/B,CAAC;IAEM,QAAQ,CAAC,GAAW;QACvB,IAAI,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QAEvC,SAAS,CAAC,QAAQ,EAAE,CAAC;IACzB,CAAC;IAEM,MAAM,CAAC,GAAW,EAAE,IAAS;QAChC,IAAI,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QACvC,OAAO,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAClC,CAAC;IAEM,QAAQ,CAAC,GAAW;QACvB,IAAI,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QACvC,OAAO,SAAS,CAAC,QAAQ,CAAC;IAC9B,CAAC;;AAxCa,mBAAc,GAAG;IAC3B,SAAS,EAAG,CAAC;CAChB,CAAC;AALN,oBA4CC","file":"Ymir.js","sourcesContent":["import { SpaceLock } from './SpaceLock';\n\nexport class Ymir {\n    public locked: Array<SpaceLock> = [];\n\n    public static defaultOptions = {\n        spaceSize : 1,\n    };\n\n    public options: any;\n\n    constructor(options?: any) {\n        this.options = Object.assign({}, Ymir.defaultOptions, options);\n    }\n\n    public getSpaceLock(key: string, spaceLockOptions: any = this.options): SpaceLock {\n        let spaceLock = this.locked.find((x) => x.key === key);\n\n        if (spaceLock === undefined) {\n            spaceLock = new SpaceLock(key, spaceLockOptions);\n            this.locked.push(spaceLock);\n        }\n\n        return spaceLock;\n    }\n\n    public checkIn(key: string) {\n        let spaceLock = this.getSpaceLock(key);\n        return spaceLock.checkIn();\n    }\n\n    public checkOut(key: string) {\n        let spaceLock = this.getSpaceLock(key);\n\n        spaceLock.checkOut();\n    }\n\n    public doOnce(key: string, func: any) {\n        let spaceLock = this.getSpaceLock(key);\n        return spaceLock.doOnce(func);\n    }\n\n    public isLocked(key: string) {\n        let spaceLock = this.getSpaceLock(key);\n        return spaceLock.isLocked;\n    }\n}\n"]}